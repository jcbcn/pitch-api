variables:
    registryEndpoint: pitch-registry
    dockerRegistry: pitchgame/
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/match/*
    - k8s/helm/match/*
    - build/match/*
jobs:
- job: BuildLinux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      cd src/match
      docker build --file Pitch.Match.Api/Dockerfile --target testrunner -t pitch.match.api:testrunner .
      docker run -d pitch.match.api:testrunner
      docker cp pitch.match.api:testrunner/Pitch.Match.Api.Tests/TestResults $(System.DefaultWorkingDirectory)
  - task: DockerCompose@0
    displayName: Compose build match
    inputs:
      dockerComposeCommand: 'build pitch.match.api'
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: $(registryEndpoint)
      dockerComposeFile: src/match/docker-compose.yml
      qualifyImageNames: true
      projectName: ""
      dockerComposeFileArgs: |
        TAG=$(Build.SourceBranchName)
        DOCKER_REGISTRY=$(dockerRegistry)
  - task: DockerCompose@0
    displayName: Compose push match
    inputs:
      dockerComposeCommand: 'push pitch.match.api'
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: $(registryEndpoint)
      dockerComposeFile: src/match/docker-compose.yml
      qualifyImageNames: true
      projectName: ""
      dockerComposeFileArgs: |
        TAG=$(Build.SourceBranchName)
        DOCKER_REGISTRY=$(dockerRegistry)
  - task: HelmDeploy@0
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: 'Pay-As-You-Go(c1640d06-3596-4f30-a322-42d2ef2d3992)'
      azureResourceGroup: 'pitch-resource-group'
      kubernetesCluster: 'pitch-aks'
      command: 'init'
      arguments: '--client-only'
  - task: HelmDeploy@0
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: 'Pay-As-You-Go(c1640d06-3596-4f30-a322-42d2ef2d3992)'
      azureResourceGroup: 'pitch-resource-group'
      kubernetesCluster: 'pitch-aks'
      command: 'package'
      chartPath: './k8s/helm/match'
      destination: '$(Build.ArtifactStagingDirectory)'
      updateDependency: true
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'helm'
      publishLocation: 'Container'
